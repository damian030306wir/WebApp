{"ast":null,"code":"'use strict';\n\nvar Typeahead = require('suggestions');\n\nvar debounce = require('lodash.debounce');\n\nvar extend = require('xtend');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar exceptions = require('./exceptions');\n\nvar MapboxClient = require('@mapbox/mapbox-sdk');\n\nvar mbxGeocoder = require('@mapbox/mapbox-sdk/services/geocoding');\n\nvar MapboxEventManager = require('./events');\n\nvar localization = require('./localization');\n\nvar subtag = require('subtag');\n/**\n * A geocoder component using the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/#geocoding)\n * @class MapboxGeocoder\n * @param {Object} options\n * @param {String} options.accessToken Required.\n * @param {String} [options.origin=https://api.mapbox.com] Use to set a custom API origin.\n * @param {Object} [options.mapboxgl] A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if `options.marker` is `true`.\n * @param {Number} [options.zoom=16] On geocoded result what zoom level should the map animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n * @param {Boolean|Object} [options.flyTo=true] If `false`, animating the map to a selected result is disabled. If `true`, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n * @param {String} [options.placeholder=Search] Override the default placeholder attribute value.\n * @param {Object} [options.proximity] a proximity argument: this is\n * a geographical point given as an object with `latitude` and `longitude`\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Boolean} [options.trackProximity=true] If `true`, the geocoder proximity will automatically update based on the map view.\n * @param {Boolean} [options.collapsed=false] If `true`, the geocoder control will collapse until hovered or in focus.\n * @param {Boolean} [options.clearAndBlurOnEsc=false] If `true`, the geocoder control will clear it's contents and blur when user presses the escape key.\n * @param {Boolean} [options.clearOnBlur=false] If `true`, the geocoder control will clear its value when the input blurs.\n * @param {Array} [options.bbox] a bounding box argument: this is\n * a bounding box given as an array in the format `[minX, minY, maxX, maxY]`.\n * Search results will be limited to the bounding box.\n * @param {string} [options.countries] a comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {string} [options.types] a comma seperated list of types that filter\n * results to match those specified. See https://docs.mapbox.com/api/search/#data-types\n * for available types.\n * If reverseGeocode is enabled, you should specify one type. If you configure more than one type, the first type will be used.\n * @param {Number} [options.minLength=2] Minimum number of characters to enter before results are shown.\n * @param {Number} [options.limit=5] Maximum number of results to show.\n * @param {string} [options.language] Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas. Defaults to the browser's language settings.\n * @param {Function} [options.filter] A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n * @param {Function} [options.localGeocoder] A function accepting the query string which performs local geocoding to supplement results from the Mapbox Geocoding API. Expected to return an Array of GeoJSON Features in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format.\n * @param {distance|score} [options.reverseMode=distance] - Set the factors that are used to sort nearby results.\n * @param {boolean} [options.reverseGeocode=false] If `true`, enable reverse geocoding mode. In reverse geocoding, search input is expected to be coordinates in the form `lat, lon`, with suggestions being the reverse geocodes.\n * @param {Boolean} [options.enableEventLogging=true] Allow Mapbox to collect anonymous usage statistics from the plugin.\n * @param {Boolean|Object} [options.marker=true]  If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that `options.mapboxgl` also be set.\n * @param {Function} [options.render] A function that specifies how the results should be rendered in the dropdown menu. This function should accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. Any HTML in the returned string will be rendered.\n * @param {Function} [options.getItemValue] A function that specifies how the selected result should be rendered in the search bar. This function should accept a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. HTML tags in the output string will not be rendered. Defaults to `(item) => item.place_name`.\n * @param {String} [options.mode=mapbox.places] A string specifying the geocoding [endpoint](https://docs.mapbox.com/api/search/#endpoints) to query. Options are `mapbox.places` and `mapbox.places-permanent`. The `mapbox.places-permanent` mode requires an enterprise license for permanent geocodes.\n * @param {Boolean} [options.localGeocoderOnly=false] If `true`, indicates that the `localGeocoder` results should be the only ones returned to the user. If `false`, indicates that the `localGeocoder` results should be combined with those from the Mapbox API with the `localGeocoder` results ranked higher.\n * @example\n * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n * map.addControl(geocoder);\n * @return {MapboxGeocoder} `this`\n *\n */\n\n\nfunction MapboxGeocoder(options) {\n  this._eventEmitter = new EventEmitter();\n  this.options = extend({}, this.options, options);\n  this.inputString = '';\n  this.fresh = true;\n  this.lastSelected = null;\n}\n\nMapboxGeocoder.prototype = {\n  options: {\n    zoom: 16,\n    flyTo: true,\n    trackProximity: true,\n    minLength: 2,\n    reverseGeocode: false,\n    limit: 5,\n    origin: 'https://api.mapbox.com',\n    enableEventLogging: true,\n    marker: true,\n    mapboxgl: null,\n    collapsed: false,\n    clearAndBlurOnEsc: false,\n    clearOnBlur: false,\n    getItemValue: function (item) {\n      return item.place_name;\n    },\n    render: function (item) {\n      var placeName = item.place_name.split(',');\n      return '<div class=\"mapboxgl-ctrl-geocoder--suggestion\"><div class=\"mapboxgl-ctrl-geocoder--suggestion-title\">' + placeName[0] + '</div><div class=\"mapboxgl-ctrl-geocoder--suggestion-address\">' + placeName.splice(1, placeName.length).join(',') + '</div></div>';\n    }\n  },\n\n  /**\n   * Add the geocoder to a container. The container can be either a `mapboxgl.Map` or a reference to an HTML `class` or `id`.\n   *\n   * If the container is a `mapboxgl.Map`, this function will behave identically to `Map.addControl(geocoder)`.\n   * If the container is an HTML `id` or `class`, the geocoder will be appended to that element.\n   *\n   * This function will throw an error if the container is not either a map or a `class`/`id` reference.\n   * It will also throw an error if the referenced HTML element cannot be found in the `document.body`.\n   *\n   * For example, if the HTML body contains the element `<div id='geocoder-container'></div>`, the following script will append the geocoder to `#geocoder-container`:\n   *\n   * ```javascript\n   * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n   * geocoder.addTo('#geocoder-container');\n   * ```\n   * @param {String|mapboxgl.Map} container A reference to the container to which to add the geocoder\n   */\n  addTo: function (container) {\n    // if the container is a map, add the control like normal\n    if (container._controlContainer) {\n      //  it's a mapbox-gl map, add like normal\n      container.addControl(this);\n    } // if the container is not a map, but an html element, then add the control to that element\n    else if (typeof container == 'string' && (container.startsWith('#') || container.startsWith('.'))) {\n        const parent = document.querySelectorAll(container);\n\n        if (parent.length == 0) {\n          throw new Error(\"Element \", container, \"not found.\");\n        }\n\n        if (parent.length > 1) {\n          throw new Error(\"Geocoder can only be added to a single html element\");\n        }\n\n        parent.forEach(function (parentEl) {\n          const el = this.onAdd(); //returns the input elements, which are then added to the requested html container\n\n          parentEl.appendChild(el);\n        }.bind(this));\n      } else {\n        throw new Error(\"Error: addTo Container must be a mapbox-gl-js map or a html element reference\");\n      }\n  },\n  onAdd: function (map) {\n    if (map && typeof map != 'string') {\n      this._map = map;\n    }\n\n    this.setLanguage();\n\n    if (!this.options.localGeocoderOnly) {\n      this.geocoderService = mbxGeocoder(MapboxClient({\n        accessToken: this.options.accessToken,\n        origin: this.options.origin\n      }));\n    }\n\n    if (this.options.localGeocoderOnly && !this.options.localGeocoder) {\n      throw new Error(\"A localGeocoder function must be specified to use localGeocoderOnly mode\");\n    }\n\n    this.eventManager = new MapboxEventManager(this.options);\n    this._onChange = this._onChange.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onPaste = this._onPaste.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._showButton = this._showButton.bind(this);\n    this._hideButton = this._hideButton.bind(this);\n    this._onQueryResult = this._onQueryResult.bind(this);\n    this.clear = this.clear.bind(this);\n    this._updateProximity = this._updateProximity.bind(this);\n    this._collapse = this._collapse.bind(this);\n    this._unCollapse = this._unCollapse.bind(this);\n    this._clear = this._clear.bind(this);\n    this._clearOnBlur = this._clearOnBlur.bind(this);\n    var el = this.container = document.createElement('div');\n    el.className = 'mapboxgl-ctrl-geocoder mapboxgl-ctrl';\n    var searchIcon = this.createIcon('search', '<path d=\"M7.4 2.5c-2.7 0-4.9 2.2-4.9 4.9s2.2 4.9 4.9 4.9c1 0 1.8-.2 2.5-.8l3.7 3.7c.2.2.4.3.8.3.7 0 1.1-.4 1.1-1.1 0-.3-.1-.5-.3-.8L11.4 10c.4-.8.8-1.6.8-2.5.1-2.8-2.1-5-4.8-5zm0 1.6c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2-3.3-1.3-3.3-3.1 1.4-3.3 3.3-3.3z\"/>');\n    this._inputEl = document.createElement('input');\n    this._inputEl.type = 'text';\n    this._inputEl.className = 'mapboxgl-ctrl-geocoder--input';\n    this.setPlaceholder();\n\n    if (this.options.collapsed) {\n      this._collapse();\n\n      this.container.addEventListener('mouseenter', this._unCollapse);\n      this.container.addEventListener('mouseleave', this._collapse);\n\n      this._inputEl.addEventListener('focus', this._unCollapse);\n    }\n\n    if (this.options.collapsed || this.options.clearOnBlur) {\n      this._inputEl.addEventListener('blur', this._onBlur);\n    }\n\n    this._inputEl.addEventListener('keydown', debounce(this._onKeyDown, 200));\n\n    this._inputEl.addEventListener('paste', this._onPaste);\n\n    this._inputEl.addEventListener('change', this._onChange);\n\n    this.container.addEventListener('mouseenter', this._showButton);\n    this.container.addEventListener('mouseleave', this._hideButton);\n\n    this._inputEl.addEventListener('keyup', function (e) {\n      this.eventManager.keyevent(e, this);\n    }.bind(this));\n\n    var actions = document.createElement('div');\n    actions.classList.add('mapboxgl-ctrl-geocoder--pin-right');\n    this._clearEl = document.createElement('button');\n\n    this._clearEl.setAttribute('aria-label', 'Clear');\n\n    this._clearEl.addEventListener('click', this.clear);\n\n    this._clearEl.className = 'mapboxgl-ctrl-geocoder--button';\n    var buttonIcon = this.createIcon('close', '<path d=\"M3.8 2.5c-.6 0-1.3.7-1.3 1.3 0 .3.2.7.5.8L7.2 9 3 13.2c-.3.3-.5.7-.5 1 0 .6.7 1.3 1.3 1.3.3 0 .7-.2 1-.5L9 10.8l4.2 4.2c.2.3.7.3 1 .3.6 0 1.3-.7 1.3-1.3 0-.3-.2-.7-.3-1l-4.4-4L15 4.6c.3-.2.5-.5.5-.8 0-.7-.7-1.3-1.3-1.3-.3 0-.7.2-1 .3L9 7.1 4.8 2.8c-.3-.1-.7-.3-1-.3z\"/>');\n\n    this._clearEl.appendChild(buttonIcon);\n\n    this._loadingEl = this.createIcon('loading', '<path fill=\"#333\" d=\"M4.4 4.4l.8.8c2.1-2.1 5.5-2.1 7.6 0l.8-.8c-2.5-2.5-6.7-2.5-9.2 0z\"/><path opacity=\".1\" d=\"M12.8 12.9c-2.1 2.1-5.5 2.1-7.6 0-2.1-2.1-2.1-5.5 0-7.7l-.8-.8c-2.5 2.5-2.5 6.7 0 9.2s6.6 2.5 9.2 0 2.5-6.6 0-9.2l-.8.8c2.2 2.1 2.2 5.6 0 7.7z\"/>');\n    actions.appendChild(this._clearEl);\n    actions.appendChild(this._loadingEl);\n    el.appendChild(searchIcon);\n    el.appendChild(this._inputEl);\n    el.appendChild(actions);\n    this._typeahead = new Typeahead(this._inputEl, [], {\n      filter: false,\n      minLength: this.options.minLength,\n      limit: this.options.limit\n    });\n    this.setRenderFunction(this.options.render);\n    this._typeahead.getItemValue = this.options.getItemValue;\n    this.mapMarker = null;\n    this._handleMarker = this._handleMarker.bind(this);\n\n    if (this._map) {\n      if (this.options.trackProximity) {\n        this._updateProximity();\n\n        this._map.on('moveend', this._updateProximity);\n      }\n\n      this._mapboxgl = this.options.mapboxgl;\n\n      if (!this._mapboxgl && this.options.marker) {\n        // eslint-disable-next-line no-console\n        console.error(\"No mapboxgl detected in options. Map markers are disabled. Please set options.mapboxgl.\");\n        this.options.marker = false;\n      }\n    }\n\n    return el;\n  },\n  createIcon: function (name, path) {\n    var icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    icon.setAttribute('class', 'mapboxgl-ctrl-geocoder--icon mapboxgl-ctrl-geocoder--icon-' + name);\n    icon.setAttribute('viewBox', '0 0 18 18');\n    icon.setAttribute('xml:space', 'preserve');\n    icon.setAttribute('width', 18);\n    icon.setAttribute('height', 18);\n    icon.innerHTML = path;\n    return icon;\n  },\n  onRemove: function () {\n    this.container.parentNode.removeChild(this.container);\n\n    if (this.options.trackProximity && this._map) {\n      this._map.off('moveend', this._updateProximity);\n    }\n\n    this._removeMarker();\n\n    this._map = null;\n    return this;\n  },\n  _onPaste: function (e) {\n    var value = (e.clipboardData || window.clipboardData).getData('text');\n\n    if (value.length >= this.options.minLength) {\n      this._geocode(value);\n    }\n  },\n  _onKeyDown: function (e) {\n    var ESC_KEY_CODE = 27,\n        TAB_KEY_CODE = 9;\n\n    if (e.keyCode === ESC_KEY_CODE && this.options.clearAndBlurOnEsc) {\n      this._clear(e);\n\n      return this._inputEl.blur();\n    } // if target has shadowRoot, then get the actual active element inside the shadowRoot\n\n\n    var target = e.target && e.target.shadowRoot ? e.target.shadowRoot.activeElement : e.target;\n    var value = target ? target.value : '';\n\n    if (!value) {\n      this.fresh = true; // the user has removed all the text\n\n      if (e.keyCode !== TAB_KEY_CODE) this.clear(e);\n      return this._clearEl.style.display = 'none';\n    } // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n\n\n    if (e.metaKey || [TAB_KEY_CODE, ESC_KEY_CODE, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1) return;\n\n    if (target.value.length >= this.options.minLength) {\n      this._geocode(target.value);\n    }\n  },\n  _showButton: function () {\n    if (this._typeahead.selected) this._clearEl.style.display = 'block';\n  },\n  _hideButton: function () {\n    if (this._typeahead.selected) this._clearEl.style.display = 'none';\n  },\n  _onBlur: function (e) {\n    if (this.options.clearOnBlur) {\n      this._clearOnBlur(e);\n    }\n\n    if (this.options.collapsed) {\n      this._collapse();\n    }\n  },\n  _onChange: function () {\n    var selected = this._typeahead.selected;\n\n    if (selected && JSON.stringify(selected) !== this.lastSelected) {\n      this._clearEl.style.display = 'none';\n\n      if (this.options.flyTo) {\n        var flyOptions;\n\n        if (selected.properties && !exceptions[selected.properties.short_code] && selected.bbox) {\n          var bbox = selected.bbox;\n          flyOptions = extend({}, this.options.flyTo);\n\n          if (this._map) {\n            this._map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], flyOptions);\n          }\n        } else if (selected.properties && exceptions[selected.properties.short_code]) {\n          // Certain geocoder search results return (and therefore zoom to fit)\n          // an unexpectedly large bounding box: for example, both Russia and the\n          // USA span both sides of -180/180, or France includes the island of\n          // Reunion in the Indian Ocean. An incomplete list of these exceptions\n          // at ./exceptions.json provides \"reasonable\" bounding boxes as a\n          // short-term solution; this may be amended as necessary.\n          flyOptions = extend({}, this.options.flyTo);\n\n          if (this._map) {\n            this._map.fitBounds(exceptions[selected.properties.short_code].bbox, flyOptions);\n          }\n        } else {\n          var defaultFlyOptions = {\n            zoom: this.options.zoom\n          };\n          flyOptions = extend({}, defaultFlyOptions, this.options.flyTo); //  ensure that center is not overriden by custom options\n\n          flyOptions.center = selected.center;\n\n          if (this._map) {\n            this._map.flyTo(flyOptions);\n          }\n        }\n      }\n\n      if (this.options.marker && this._mapboxgl) {\n        this._handleMarker(selected);\n      } // After selecting a feature, re-focus the textarea and set\n      // cursor at start.\n\n\n      this._inputEl.focus();\n\n      this._inputEl.scrollLeft = 0;\n\n      this._inputEl.setSelectionRange(0, 0);\n\n      this.lastSelected = JSON.stringify(selected);\n\n      this._eventEmitter.emit('result', {\n        result: selected\n      });\n\n      this.eventManager.select(selected, this);\n    }\n  },\n  _geocode: function (searchInput) {\n    this._loadingEl.style.display = 'block';\n\n    this._eventEmitter.emit('loading', {\n      query: searchInput\n    });\n\n    this.inputString = searchInput; // Possible config proprerties to pass to client\n\n    var keys = ['bbox', 'limit', 'proximity', 'countries', 'types', 'language', 'reverseMode', 'mode'];\n    var self = this; // Create config object\n\n    var config = keys.reduce(function (config, key) {\n      if (self.options[key]) {\n        // countries, types, and language need to be passed in as arrays to client\n        // https://github.com/mapbox/mapbox-sdk-js/blob/master/services/geocoding.js#L38-L47\n        ['countries', 'types', 'language'].indexOf(key) > -1 ? config[key] = self.options[key].split(/[\\s,]+/) : config[key] = self.options[key];\n\n        if (key === 'proximity' && self.options[key] && self.options[key].longitude && self.options[key].latitude) {\n          config[key] = [self.options[key].longitude, self.options[key].latitude];\n        }\n      }\n\n      return config;\n    }, {});\n    var request;\n\n    if (this.options.localGeocoderOnly) {\n      request = Promise.resolve();\n    } // check if searchInput resembles coordinates, and if it does,\n    // make the request a reverseGeocode\n    else if (this.options.reverseGeocode && /(-?\\d+\\.?\\d*)[, ]+(-?\\d+\\.?\\d*)[ ]*$/.test(searchInput)) {\n        // parse coordinates\n        var coords = searchInput.split(/[\\s(,)?]+/).map(function (c) {\n          return parseFloat(c, 10);\n        }).reverse(); // client only accepts one type for reverseGeocode, so\n        // use first config type if one, if not default to poi\n\n        config.types ? [config.types[0]] : [\"poi\"];\n        config = extend(config, {\n          query: coords,\n          limit: 1\n        });\n        request = this.geocoderService.reverseGeocode(config).send();\n      } else {\n        config = extend(config, {\n          query: searchInput\n        });\n        request = this.geocoderService.forwardGeocode(config).send();\n      }\n\n    var localGeocoderRes = [];\n\n    if (this.options.localGeocoder) {\n      localGeocoderRes = this.options.localGeocoder(searchInput);\n\n      if (!localGeocoderRes) {\n        localGeocoderRes = [];\n      }\n    }\n\n    request.then(function (response) {\n      this._loadingEl.style.display = 'none';\n      var res = {};\n\n      if (!response) {\n        res = {\n          type: 'FeatureCollection',\n          features: []\n        };\n      } else if (response.statusCode == '200') {\n        res = response.body;\n        res.request = response.request;\n        res.headers = response.headers;\n      }\n\n      res.config = config;\n\n      if (this.fresh) {\n        this.eventManager.start(this);\n        this.fresh = false;\n      } // supplement Mapbox Geocoding API results with locally populated results\n\n\n      res.features = res.features ? localGeocoderRes.concat(res.features) : localGeocoderRes; // apply results filter if provided\n\n      if (this.options.filter && res.features.length) {\n        res.features = res.features.filter(this.options.filter);\n      }\n\n      if (res.features.length) {\n        this._clearEl.style.display = 'block';\n\n        this._eventEmitter.emit('results', res);\n\n        this._typeahead.update(res.features);\n      } else {\n        this._clearEl.style.display = 'none';\n        this._typeahead.selected = null;\n\n        this._renderNoResults();\n\n        this._eventEmitter.emit('results', res);\n      }\n    }.bind(this));\n    request.catch(function (err) {\n      this._loadingEl.style.display = 'none'; // in the event of an error in the Mapbox Geocoding API still display results from the localGeocoder\n\n      if (localGeocoderRes.length && this.options.localGeocoder) {\n        this._clearEl.style.display = 'block';\n\n        this._typeahead.update(localGeocoderRes);\n      } else {\n        this._clearEl.style.display = 'none';\n        this._typeahead.selected = null;\n\n        this._renderError();\n      }\n\n      this._eventEmitter.emit('results', {\n        features: localGeocoderRes\n      });\n\n      this._eventEmitter.emit('error', {\n        error: err\n      });\n    }.bind(this));\n    return request;\n  },\n\n  /**\n   * Shared logic for clearing input\n   * @param {Event} [ev] the event that triggered the clear, if available\n   * @private\n   *\n   */\n  _clear: function (ev) {\n    if (ev) ev.preventDefault();\n    this._inputEl.value = '';\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    this._onChange();\n\n    this._clearEl.style.display = 'none';\n\n    this._removeMarker();\n\n    this.lastSelected = null;\n\n    this._eventEmitter.emit('clear');\n\n    this.fresh = true;\n  },\n\n  /**\n   * Clear and then focus the input.\n   * @param {Event} [ev] the event that triggered the clear, if available\n   *\n   */\n  clear: function (ev) {\n    this._clear(ev);\n\n    this._inputEl.focus();\n  },\n\n  /**\n   * Clear the input, without refocusing it. Used to implement clearOnBlur\n   * constructor option.\n   * @param {Event} [ev] the blur event\n   * @private\n   */\n  _clearOnBlur: function (ev) {\n    var ctx = this;\n    /*\n     * If relatedTarget is not found, assume user targeted the suggestions list.\n     * In that case, do not clear on blur. There are other edge cases where\n     * ev.relatedTarget could be null. Clicking on list always results in null\n     * relatedtarget because of upstream behavior in `suggestions`.\n     *\n     * The ideal solution would be to check if ev.relatedTarget is a child of\n     * the list. See issue #258 for details on why we can't do that yet.\n     */\n\n    if (ev.relatedTarget) {\n      ctx._clear(ev);\n    }\n  },\n  _onQueryResult: function (response) {\n    var results = response.body;\n    if (!results.features.length) return;\n    var result = results.features[0];\n    this._typeahead.selected = result;\n    this._inputEl.value = result.place_name;\n\n    this._onChange();\n  },\n  _updateProximity: function () {\n    // proximity is designed for local scale, if the user is looking at the whole world,\n    // it doesn't make sense to factor in the arbitrary centre of the map\n    if (!this._map) {\n      return;\n    }\n\n    if (this._map.getZoom() > 9) {\n      var center = this._map.getCenter().wrap();\n\n      this.setProximity({\n        longitude: center.lng,\n        latitude: center.lat\n      });\n    } else {\n      this.setProximity(null);\n    }\n  },\n  _collapse: function () {\n    // do not collapse if input is in focus\n    if (!this._inputEl.value && this._inputEl !== document.activeElement) this.container.classList.add('mapboxgl-ctrl-geocoder--collapsed');\n  },\n  _unCollapse: function () {\n    this.container.classList.remove('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  /**\n   * Set & query the input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  query: function (searchInput) {\n    this._geocode(searchInput).then(this._onQueryResult);\n\n    return this;\n  },\n  _renderError: function () {\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error'>There was an error reaching the server</div>\";\n\n    this._renderMessage(errorMessage);\n  },\n  _renderNoResults: function () {\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error mapbox-gl-geocoder--no-results'>No results found</div>\";\n\n    this._renderMessage(errorMessage);\n  },\n  _renderMessage: function (msg) {\n    this._typeahead.update([]);\n\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    this._typeahead.renderError(msg);\n  },\n\n  /**\n   * Get the text to use as the search bar placeholder\n   *\n   * If placeholder is provided in options, then use options.placeholder\n   * Otherwise, if language is provided in options, then use the localized string of the first language if available\n   * Otherwise use the default\n   *\n   * @returns {String} the value to use as the search bar placeholder\n   * @private\n   */\n  _getPlaceholderText: function () {\n    if (this.options.placeholder) return this.options.placeholder;\n\n    if (this.options.language) {\n      var firstLanguage = this.options.language.split(\",\")[0];\n      var language = subtag.language(firstLanguage);\n      var localizedValue = localization.placeholder[language];\n      if (localizedValue) return localizedValue;\n    }\n\n    return 'Search';\n  },\n\n  /**\n   * Set input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  setInput: function (searchInput) {\n    // Set input value to passed value and clear everything else.\n    this._inputEl.value = searchInput;\n    this._typeahead.selected = null;\n\n    this._typeahead.clear();\n\n    this._onChange();\n\n    return this;\n  },\n\n  /**\n   * Set proximity\n   * @param {Object} proximity The new `options.proximity` value. This is a geographical point given as an object with `latitude` and `longitude` properties.\n   * @returns {MapboxGeocoder} this\n   */\n  setProximity: function (proximity) {\n    this.options.proximity = proximity;\n    return this;\n  },\n\n  /**\n   * Get proximity\n   * @returns {Object} The geocoder proximity\n   */\n  getProximity: function () {\n    return this.options.proximity;\n  },\n\n  /**\n   * Set the render function used in the results dropdown\n   * @param {Function} fn The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n   * @returns {MapboxGeocoder} this\n   */\n  setRenderFunction: function (fn) {\n    if (fn && typeof fn == \"function\") {\n      this._typeahead.render = fn;\n    }\n\n    return this;\n  },\n\n  /**\n   * Get the function used to render the results dropdown\n   *\n   * @returns {Function} the render function\n   */\n  getRenderFunction: function () {\n    return this._typeahead.render;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   *\n   * Look first at the explicitly set options otherwise use the browser's language settings\n   * @param {String} language Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas.\n   * @returns {MapboxGeocoder} this\n   */\n  setLanguage: function (language) {\n    var browserLocale = navigator.language || navigator.userLanguage || navigator.browserLanguage;\n    this.options.language = language || this.options.language || browserLocale;\n    return this;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   * @returns {String} The language(s) used by the plugin, if any\n   */\n  getLanguage: function () {\n    return this.options.language;\n  },\n\n  /**\n   * Get the zoom level the map will move to when there is no bounding box on the selected result\n   * @returns {Number} the map zoom\n   */\n  getZoom: function () {\n    return this.options.zoom;\n  },\n\n  /**\n   * Set the zoom level\n   * @param {Number} zoom The zoom level that the map should animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n   * @returns {MapboxGeocoder} this\n   */\n  setZoom: function (zoom) {\n    this.options.zoom = zoom;\n    return this;\n  },\n\n  /**\n   * Get the parameters used to fly to the selected response, if any\n   * @returns {Boolean|Object} The `flyTo` option\n   */\n  getFlyTo: function () {\n    return this.options.flyTo;\n  },\n\n  /**\n   * Set the flyTo options\n   * @param {Boolean|Object} flyTo If false, animating the map to a selected result is disabled. If true, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n   */\n  setFlyTo: function (flyTo) {\n    this.options.flyTo = flyTo;\n    return this;\n  },\n\n  /**\n   * Get the value of the placeholder string\n   * @returns {String} The input element's placeholder value\n   */\n  getPlaceholder: function () {\n    return this.options.placeholder;\n  },\n\n  /**\n   * Set the value of the input element's placeholder\n   * @param {String} placeholder the text to use as the input element's placeholder\n   * @returns {MapboxGeocoder} this\n   */\n  setPlaceholder: function (placeholder) {\n    this.placeholder = placeholder ? placeholder : this._getPlaceholderText();\n    this._inputEl.placeholder = this.placeholder;\n\n    this._inputEl.setAttribute('aria-label', this.placeholder);\n\n    return this;\n  },\n\n  /**\n   * Get the bounding box used by the plugin\n   * @returns {Array<Number>} the bounding box, if any\n   */\n  getBbox: function () {\n    return this.options.bbox;\n  },\n\n  /**\n   * Set the bounding box to limit search results to\n   * @param {Array<Number>} bbox a bounding box given as an array in the format [minX, minY, maxX, maxY].\n   * @returns {MapboxGeocoder} this\n   */\n  setBbox: function (bbox) {\n    this.options.bbox = bbox;\n    return this;\n  },\n\n  /**\n   * Get a list of the countries to limit search results to\n   * @returns {String} a comma separated list of countries to limit to, if any\n   */\n  getCountries: function () {\n    return this.options.countries;\n  },\n\n  /**\n   * Set the countries to limit search results to\n   * @param {String} countries a comma separated list of countries to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setCountries: function (countries) {\n    this.options.countries = countries;\n    return this;\n  },\n\n  /**\n   * Get a list of the types to limit search results to\n   * @returns {String} a comma separated list of types to limit to\n   */\n  getTypes: function () {\n    return this.options.types;\n  },\n\n  /**\n   * Set the types to limit search results to\n   * @param {String} countries a comma separated list of types to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setTypes: function (types) {\n    this.options.types = types;\n    return this;\n  },\n\n  /**\n   * Get the minimum number of characters typed to trigger results used in the plugin\n   * @returns {Number} The minimum length in characters before a search is triggered\n   */\n  getMinLength: function () {\n    return this.options.minLength;\n  },\n\n  /**\n   * Set the minimum number of characters typed to trigger results used by the plugin\n   * @param {Number} minLength the minimum length in characters\n   * @returns {MapboxGeocoder} this\n   */\n  setMinLength: function (minLength) {\n    this.options.minLength = minLength;\n    if (this._typeahead) this._typeahead.minLength = minLength;\n    return this;\n  },\n\n  /**\n   * Get the limit value for the number of results to display used by the plugin\n   * @returns {Number} The limit value for the number of results to display used by the plugin\n   */\n  getLimit: function () {\n    return this.options.limit;\n  },\n\n  /**\n   * Set the limit value for the number of results to display used by the plugin\n   * @param {Number} limit the number of search results to return\n   * @returns {MapboxGeocoder}\n   */\n  setLimit: function (limit) {\n    this.options.limit = limit;\n    if (this._typeahead) this._typeahead.options.limit = limit;\n    return this;\n  },\n\n  /**\n   * Get the filter function used by the plugin\n   * @returns {Function} the filter function\n   */\n  getFilter: function () {\n    return this.options.filter;\n  },\n\n  /**\n   * Set the filter function used by the plugin.\n   * @param {Function} filter A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n   * @returns {MapboxGeocoder} this\n   */\n  setFilter: function (filter) {\n    this.options.filter = filter;\n    return this;\n  },\n\n  /**\n   * Set the geocoding endpoint used by the plugin.\n   * @param {Function} origin A function which accepts an HTTPS URL to specify the endpoint to query results from.\n   * @returns {MapboxGeocoder} this\n   */\n  setOrigin: function (origin) {\n    this.options.origin = origin;\n    this.geocoderService = mbxGeocoder(MapboxClient({\n      accessToken: this.options.accessToken,\n      origin: this.options.origin\n    }));\n    return this;\n  },\n\n  /**\n   * Get the geocoding endpoint the plugin is currently set to\n   * @returns {Function} the endpoint URL\n   */\n  getOrigin: function () {\n    return this.options.origin;\n  },\n\n  /**\n   * Handle the placement of a result marking the selected result\n   * @private\n   * @param {Object} selected the selected geojson feature\n   * @returns {MapboxGeocoder} this\n   */\n  _handleMarker: function (selected) {\n    // clean up any old marker that might be present\n    if (!this._map) {\n      return;\n    }\n\n    this._removeMarker();\n\n    var defaultMarkerOptions = {\n      color: '#4668F2'\n    };\n    var markerOptions = extend({}, defaultMarkerOptions, this.options.marker);\n    this.mapMarker = new this._mapboxgl.Marker(markerOptions);\n\n    if (selected.center) {\n      this.mapMarker.setLngLat(selected.center).addTo(this._map);\n    } else if (selected.geometry && selected.geometry.type && selected.geometry.type === 'Point' && selected.geometry.coordinates) {\n      this.mapMarker.setLngLat(selected.geometry.coordinates).addTo(this._map);\n    }\n\n    return this;\n  },\n\n  /**\n   * Handle the removal of a result marker\n   * @private\n   */\n  _removeMarker: function () {\n    if (this.mapMarker) {\n      this.mapMarker.remove();\n      this.mapMarker = null;\n    }\n  },\n\n  /**\n   * Subscribe to events that happen within the plugin.\n   * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n   *\n   * - __clear__ `Emitted when the input is cleared`\n   * - __loading__ `{ query } Emitted when the geocoder is looking up a query`\n   * - __results__ `{ results } Fired when the geocoder returns a response`\n   * - __result__ `{ result } Fired when input is set`\n   * - __error__ `{ error } Error as string`\n   * @param {Function} fn function that's called when the event is emitted.\n   * @returns {MapboxGeocoder} this;\n   */\n  on: function (type, fn) {\n    this._eventEmitter.on(type, fn);\n\n    return this;\n  },\n\n  /**\n   * Remove an event\n   * @returns {MapboxGeocoder} this\n   * @param {String} type Event name.\n   * @param {Function} fn Function that should unsubscribe to the event emitted.\n   */\n  off: function (type, fn) {\n    this._eventEmitter.removeListener(type, fn);\n\n    this.eventManager.remove();\n    return this;\n  }\n};\nmodule.exports = MapboxGeocoder;","map":{"version":3,"sources":["C:/Users/user/Desktop/weather2/node_modules/@mapbox/mapbox-gl-geocoder/lib/index.js"],"names":["Typeahead","require","debounce","extend","EventEmitter","exceptions","MapboxClient","mbxGeocoder","MapboxEventManager","localization","subtag","MapboxGeocoder","options","_eventEmitter","inputString","fresh","lastSelected","prototype","zoom","flyTo","trackProximity","minLength","reverseGeocode","limit","origin","enableEventLogging","marker","mapboxgl","collapsed","clearAndBlurOnEsc","clearOnBlur","getItemValue","item","place_name","render","placeName","split","splice","length","join","addTo","container","_controlContainer","addControl","startsWith","parent","document","querySelectorAll","Error","forEach","parentEl","el","onAdd","appendChild","bind","map","_map","setLanguage","localGeocoderOnly","geocoderService","accessToken","localGeocoder","eventManager","_onChange","_onKeyDown","_onPaste","_onBlur","_showButton","_hideButton","_onQueryResult","clear","_updateProximity","_collapse","_unCollapse","_clear","_clearOnBlur","createElement","className","searchIcon","createIcon","_inputEl","type","setPlaceholder","addEventListener","e","keyevent","actions","classList","add","_clearEl","setAttribute","buttonIcon","_loadingEl","_typeahead","filter","setRenderFunction","mapMarker","_handleMarker","on","_mapboxgl","console","error","name","path","icon","createElementNS","innerHTML","onRemove","parentNode","removeChild","off","_removeMarker","value","clipboardData","window","getData","_geocode","ESC_KEY_CODE","TAB_KEY_CODE","keyCode","blur","target","shadowRoot","activeElement","style","display","metaKey","indexOf","selected","JSON","stringify","flyOptions","properties","short_code","bbox","fitBounds","defaultFlyOptions","center","focus","scrollLeft","setSelectionRange","emit","result","select","searchInput","query","keys","self","config","reduce","key","longitude","latitude","request","Promise","resolve","test","coords","c","parseFloat","reverse","types","send","forwardGeocode","localGeocoderRes","then","response","res","features","statusCode","body","headers","start","concat","update","_renderNoResults","catch","err","_renderError","ev","preventDefault","ctx","relatedTarget","results","getZoom","getCenter","wrap","setProximity","lng","lat","remove","errorMessage","_renderMessage","msg","renderError","_getPlaceholderText","placeholder","language","firstLanguage","localizedValue","setInput","proximity","getProximity","fn","getRenderFunction","browserLocale","navigator","userLanguage","browserLanguage","getLanguage","setZoom","getFlyTo","setFlyTo","getPlaceholder","getBbox","setBbox","getCountries","countries","setCountries","getTypes","setTypes","getMinLength","setMinLength","getLimit","setLimit","getFilter","setFilter","setOrigin","getOrigin","defaultMarkerOptions","color","markerOptions","Marker","setLngLat","geometry","coordinates","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Typeahead = require('suggestions');\nvar debounce = require('lodash.debounce');\nvar extend = require('xtend');\nvar EventEmitter = require('events').EventEmitter;\nvar exceptions = require('./exceptions');\nvar MapboxClient = require('@mapbox/mapbox-sdk');\nvar mbxGeocoder = require('@mapbox/mapbox-sdk/services/geocoding');\nvar MapboxEventManager = require('./events');\nvar localization = require('./localization');\nvar subtag = require('subtag');\n\n/**\n * A geocoder component using the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/#geocoding)\n * @class MapboxGeocoder\n * @param {Object} options\n * @param {String} options.accessToken Required.\n * @param {String} [options.origin=https://api.mapbox.com] Use to set a custom API origin.\n * @param {Object} [options.mapboxgl] A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if `options.marker` is `true`.\n * @param {Number} [options.zoom=16] On geocoded result what zoom level should the map animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n * @param {Boolean|Object} [options.flyTo=true] If `false`, animating the map to a selected result is disabled. If `true`, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n * @param {String} [options.placeholder=Search] Override the default placeholder attribute value.\n * @param {Object} [options.proximity] a proximity argument: this is\n * a geographical point given as an object with `latitude` and `longitude`\n * properties. Search results closer to this point will be given\n * higher priority.\n * @param {Boolean} [options.trackProximity=true] If `true`, the geocoder proximity will automatically update based on the map view.\n * @param {Boolean} [options.collapsed=false] If `true`, the geocoder control will collapse until hovered or in focus.\n * @param {Boolean} [options.clearAndBlurOnEsc=false] If `true`, the geocoder control will clear it's contents and blur when user presses the escape key.\n * @param {Boolean} [options.clearOnBlur=false] If `true`, the geocoder control will clear its value when the input blurs.\n * @param {Array} [options.bbox] a bounding box argument: this is\n * a bounding box given as an array in the format `[minX, minY, maxX, maxY]`.\n * Search results will be limited to the bounding box.\n * @param {string} [options.countries] a comma separated list of country codes to\n * limit results to specified country or countries.\n * @param {string} [options.types] a comma seperated list of types that filter\n * results to match those specified. See https://docs.mapbox.com/api/search/#data-types\n * for available types.\n * If reverseGeocode is enabled, you should specify one type. If you configure more than one type, the first type will be used.\n * @param {Number} [options.minLength=2] Minimum number of characters to enter before results are shown.\n * @param {Number} [options.limit=5] Maximum number of results to show.\n * @param {string} [options.language] Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas. Defaults to the browser's language settings.\n * @param {Function} [options.filter] A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n * @param {Function} [options.localGeocoder] A function accepting the query string which performs local geocoding to supplement results from the Mapbox Geocoding API. Expected to return an Array of GeoJSON Features in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format.\n * @param {distance|score} [options.reverseMode=distance] - Set the factors that are used to sort nearby results.\n * @param {boolean} [options.reverseGeocode=false] If `true`, enable reverse geocoding mode. In reverse geocoding, search input is expected to be coordinates in the form `lat, lon`, with suggestions being the reverse geocodes.\n * @param {Boolean} [options.enableEventLogging=true] Allow Mapbox to collect anonymous usage statistics from the plugin.\n * @param {Boolean|Object} [options.marker=true]  If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that `options.mapboxgl` also be set.\n * @param {Function} [options.render] A function that specifies how the results should be rendered in the dropdown menu. This function should accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. Any HTML in the returned string will be rendered.\n * @param {Function} [options.getItemValue] A function that specifies how the selected result should be rendered in the search bar. This function should accept a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and return a string. HTML tags in the output string will not be rendered. Defaults to `(item) => item.place_name`.\n * @param {String} [options.mode=mapbox.places] A string specifying the geocoding [endpoint](https://docs.mapbox.com/api/search/#endpoints) to query. Options are `mapbox.places` and `mapbox.places-permanent`. The `mapbox.places-permanent` mode requires an enterprise license for permanent geocodes.\n * @param {Boolean} [options.localGeocoderOnly=false] If `true`, indicates that the `localGeocoder` results should be the only ones returned to the user. If `false`, indicates that the `localGeocoder` results should be combined with those from the Mapbox API with the `localGeocoder` results ranked higher.\n * @example\n * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n * map.addControl(geocoder);\n * @return {MapboxGeocoder} `this`\n *\n */\n\nfunction MapboxGeocoder(options) {\n  this._eventEmitter = new EventEmitter();\n  this.options = extend({}, this.options, options);\n  this.inputString = '';\n  this.fresh = true;\n  this.lastSelected = null;\n}\n\nMapboxGeocoder.prototype = {\n  options: {\n    zoom: 16,\n    flyTo: true,\n    trackProximity: true,\n    minLength: 2,\n    reverseGeocode: false,\n    limit: 5,\n    origin: 'https://api.mapbox.com',\n    enableEventLogging: true,\n    marker: true,\n    mapboxgl: null,\n    collapsed: false,\n    clearAndBlurOnEsc: false,\n    clearOnBlur: false,\n    getItemValue: function(item) {\n      return item.place_name\n    },\n    render: function(item) {\n      var placeName = item.place_name.split(',');\n      return '<div class=\"mapboxgl-ctrl-geocoder--suggestion\"><div class=\"mapboxgl-ctrl-geocoder--suggestion-title\">' + placeName[0]+ '</div><div class=\"mapboxgl-ctrl-geocoder--suggestion-address\">' + placeName.splice(1, placeName.length).join(',') + '</div></div>';\n    }\n  },\n\n  /**\n   * Add the geocoder to a container. The container can be either a `mapboxgl.Map` or a reference to an HTML `class` or `id`.\n   *\n   * If the container is a `mapboxgl.Map`, this function will behave identically to `Map.addControl(geocoder)`.\n   * If the container is an HTML `id` or `class`, the geocoder will be appended to that element.\n   *\n   * This function will throw an error if the container is not either a map or a `class`/`id` reference.\n   * It will also throw an error if the referenced HTML element cannot be found in the `document.body`.\n   *\n   * For example, if the HTML body contains the element `<div id='geocoder-container'></div>`, the following script will append the geocoder to `#geocoder-container`:\n   *\n   * ```javascript\n   * var geocoder = new MapboxGeocoder({ accessToken: mapboxgl.accessToken });\n   * geocoder.addTo('#geocoder-container');\n   * ```\n   * @param {String|mapboxgl.Map} container A reference to the container to which to add the geocoder\n   */\n  addTo: function(container){\n    // if the container is a map, add the control like normal\n    if (container._controlContainer){\n      //  it's a mapbox-gl map, add like normal\n      container.addControl(this)\n    }\n    // if the container is not a map, but an html element, then add the control to that element\n    else if (typeof container == 'string' && (container.startsWith('#') || container.startsWith('.'))){\n      const parent = document.querySelectorAll(container);\n      if (parent.length == 0){\n        throw new Error(\"Element \", container, \"not found.\")\n      }\n\n      if (parent.length > 1){\n        throw new Error(\"Geocoder can only be added to a single html element\")\n      }\n\n      parent.forEach(function(parentEl){\n        const el = this.onAdd(); //returns the input elements, which are then added to the requested html container\n        parentEl.appendChild(el);\n      }.bind(this))\n\n    }else{\n      throw new Error(\"Error: addTo Container must be a mapbox-gl-js map or a html element reference\")\n    }\n  },\n\n  onAdd: function(map) {\n    if (map && typeof map != 'string'){\n      this._map = map;\n    }\n\n    this.setLanguage();\n\n    if (!this.options.localGeocoderOnly){\n      this.geocoderService = mbxGeocoder(\n        MapboxClient({\n          accessToken: this.options.accessToken,\n          origin: this.options.origin\n        })\n      );\n    }\n\n    if (this.options.localGeocoderOnly && !this.options.localGeocoder){\n      throw new Error(\"A localGeocoder function must be specified to use localGeocoderOnly mode\")\n    }\n\n    this.eventManager = new MapboxEventManager(this.options);\n\n    this._onChange = this._onChange.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onPaste = this._onPaste.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._showButton = this._showButton.bind(this);\n    this._hideButton = this._hideButton.bind(this);\n    this._onQueryResult = this._onQueryResult.bind(this);\n    this.clear = this.clear.bind(this);\n    this._updateProximity = this._updateProximity.bind(this);\n    this._collapse = this._collapse.bind(this);\n    this._unCollapse = this._unCollapse.bind(this);\n    this._clear = this._clear.bind(this);\n    this._clearOnBlur = this._clearOnBlur.bind(this);\n\n    var el = (this.container = document.createElement('div'));\n    el.className = 'mapboxgl-ctrl-geocoder mapboxgl-ctrl';\n\n    var searchIcon = this.createIcon('search', '<path d=\"M7.4 2.5c-2.7 0-4.9 2.2-4.9 4.9s2.2 4.9 4.9 4.9c1 0 1.8-.2 2.5-.8l3.7 3.7c.2.2.4.3.8.3.7 0 1.1-.4 1.1-1.1 0-.3-.1-.5-.3-.8L11.4 10c.4-.8.8-1.6.8-2.5.1-2.8-2.1-5-4.8-5zm0 1.6c1.8 0 3.2 1.4 3.2 3.2s-1.4 3.2-3.2 3.2-3.3-1.3-3.3-3.1 1.4-3.3 3.3-3.3z\"/>')\n\n    this._inputEl = document.createElement('input');\n    this._inputEl.type = 'text';\n    this._inputEl.className = 'mapboxgl-ctrl-geocoder--input';\n\n    this.setPlaceholder();\n\n    if (this.options.collapsed) {\n      this._collapse();\n      this.container.addEventListener('mouseenter', this._unCollapse);\n      this.container.addEventListener('mouseleave', this._collapse);\n      this._inputEl.addEventListener('focus', this._unCollapse);\n    }\n\n    if (this.options.collapsed || this.options.clearOnBlur) {\n      this._inputEl.addEventListener('blur', this._onBlur);\n    }\n\n    this._inputEl.addEventListener('keydown', debounce(this._onKeyDown, 200));\n    this._inputEl.addEventListener('paste', this._onPaste);\n    this._inputEl.addEventListener('change', this._onChange);\n    this.container.addEventListener('mouseenter', this._showButton);\n    this.container.addEventListener('mouseleave', this._hideButton);\n    this._inputEl.addEventListener('keyup', function(e){\n      this.eventManager.keyevent(e, this);\n    }.bind(this));\n\n    var actions = document.createElement('div');\n    actions.classList.add('mapboxgl-ctrl-geocoder--pin-right');\n\n    this._clearEl = document.createElement('button');\n    this._clearEl.setAttribute('aria-label', 'Clear');\n    this._clearEl.addEventListener('click', this.clear);\n    this._clearEl.className = 'mapboxgl-ctrl-geocoder--button';\n\n    var buttonIcon = this.createIcon('close', '<path d=\"M3.8 2.5c-.6 0-1.3.7-1.3 1.3 0 .3.2.7.5.8L7.2 9 3 13.2c-.3.3-.5.7-.5 1 0 .6.7 1.3 1.3 1.3.3 0 .7-.2 1-.5L9 10.8l4.2 4.2c.2.3.7.3 1 .3.6 0 1.3-.7 1.3-1.3 0-.3-.2-.7-.3-1l-4.4-4L15 4.6c.3-.2.5-.5.5-.8 0-.7-.7-1.3-1.3-1.3-.3 0-.7.2-1 .3L9 7.1 4.8 2.8c-.3-.1-.7-.3-1-.3z\"/>')\n    this._clearEl.appendChild(buttonIcon);\n\n    this._loadingEl = this.createIcon('loading', '<path fill=\"#333\" d=\"M4.4 4.4l.8.8c2.1-2.1 5.5-2.1 7.6 0l.8-.8c-2.5-2.5-6.7-2.5-9.2 0z\"/><path opacity=\".1\" d=\"M12.8 12.9c-2.1 2.1-5.5 2.1-7.6 0-2.1-2.1-2.1-5.5 0-7.7l-.8-.8c-2.5 2.5-2.5 6.7 0 9.2s6.6 2.5 9.2 0 2.5-6.6 0-9.2l-.8.8c2.2 2.1 2.2 5.6 0 7.7z\"/>');\n\n    actions.appendChild(this._clearEl);\n    actions.appendChild(this._loadingEl);\n\n    el.appendChild(searchIcon);\n    el.appendChild(this._inputEl);\n    el.appendChild(actions);\n\n    this._typeahead = new Typeahead(this._inputEl, [], {\n      filter: false,\n      minLength: this.options.minLength,\n      limit: this.options.limit\n    });\n\n    this.setRenderFunction(this.options.render);\n    this._typeahead.getItemValue = this.options.getItemValue;\n\n    this.mapMarker = null;\n    this._handleMarker = this._handleMarker.bind(this);\n    if (this._map){\n      if (this.options.trackProximity ) {\n        this._updateProximity();\n        this._map.on('moveend', this._updateProximity);\n      }\n      this._mapboxgl = this.options.mapboxgl;\n      if (!this._mapboxgl && this.options.marker) {\n        // eslint-disable-next-line no-console\n        console.error(\"No mapboxgl detected in options. Map markers are disabled. Please set options.mapboxgl.\");\n        this.options.marker = false;\n      }\n    }\n    return el;\n  },\n\n  createIcon: function(name, path) {\n    var icon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    icon.setAttribute('class', 'mapboxgl-ctrl-geocoder--icon mapboxgl-ctrl-geocoder--icon-' + name);\n    icon.setAttribute('viewBox', '0 0 18 18');\n    icon.setAttribute('xml:space','preserve');\n    icon.setAttribute('width', 18);\n    icon.setAttribute('height', 18);\n    icon.innerHTML = path;\n    return icon;\n  },\n\n  onRemove: function() {\n    this.container.parentNode.removeChild(this.container);\n\n    if (this.options.trackProximity && this._map) {\n      this._map.off('moveend', this._updateProximity);\n    }\n\n    this._removeMarker();\n\n    this._map = null;\n\n    return this;\n  },\n\n  _onPaste: function(e){\n    var value = (e.clipboardData || window.clipboardData).getData('text');\n    if (value.length >= this.options.minLength) {\n      this._geocode(value);\n    }\n  },\n\n  _onKeyDown: function(e) {\n    var ESC_KEY_CODE = 27,\n      TAB_KEY_CODE = 9;\n\n    if (e.keyCode === ESC_KEY_CODE && this.options.clearAndBlurOnEsc) {\n      this._clear(e);\n      return this._inputEl.blur();\n    }\n\n    // if target has shadowRoot, then get the actual active element inside the shadowRoot\n    var target = e.target && e.target.shadowRoot\n      ? e.target.shadowRoot.activeElement\n      : e.target;\n    var value = target ? target.value : '';\n\n    if (!value) {\n      this.fresh = true;\n      // the user has removed all the text\n      if (e.keyCode !== TAB_KEY_CODE) this.clear(e);\n      return (this._clearEl.style.display = 'none');\n    }\n\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if ((e.metaKey || [TAB_KEY_CODE, ESC_KEY_CODE, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1))\n      return;\n\n    if (target.value.length >= this.options.minLength) {\n      this._geocode(target.value);\n    }\n  },\n\n  _showButton: function() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'block';\n  },\n\n  _hideButton: function() {\n    if (this._typeahead.selected) this._clearEl.style.display = 'none';\n  },\n\n  _onBlur: function(e) {\n    if (this.options.clearOnBlur) {\n      this._clearOnBlur(e);\n    }\n    if (this.options.collapsed) {\n      this._collapse();\n    }\n  },\n  _onChange: function() {\n    var selected = this._typeahead.selected;\n    if (selected  && JSON.stringify(selected) !== this.lastSelected) {\n      this._clearEl.style.display = 'none';\n      if (this.options.flyTo) {\n        var flyOptions;\n        if (selected.properties && !exceptions[selected.properties.short_code] && selected.bbox) {\n          var bbox = selected.bbox;\n          flyOptions = extend({}, this.options.flyTo);\n          if (this._map){\n            this._map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], flyOptions);\n          }\n        } else if (selected.properties && exceptions[selected.properties.short_code]) {\n          // Certain geocoder search results return (and therefore zoom to fit)\n          // an unexpectedly large bounding box: for example, both Russia and the\n          // USA span both sides of -180/180, or France includes the island of\n          // Reunion in the Indian Ocean. An incomplete list of these exceptions\n          // at ./exceptions.json provides \"reasonable\" bounding boxes as a\n          // short-term solution; this may be amended as necessary.\n          flyOptions = extend({}, this.options.flyTo);\n          if (this._map){\n            this._map.fitBounds(exceptions[selected.properties.short_code].bbox, flyOptions);\n          }\n        } else {\n          var defaultFlyOptions = {\n            zoom: this.options.zoom\n          }\n          flyOptions = extend({}, defaultFlyOptions, this.options.flyTo);\n          //  ensure that center is not overriden by custom options\n          flyOptions.center = selected.center;\n          if (this._map){\n            this._map.flyTo(flyOptions);\n          }\n        }\n      }\n      if (this.options.marker && this._mapboxgl){\n        this._handleMarker(selected);\n      }\n\n      // After selecting a feature, re-focus the textarea and set\n      // cursor at start.\n      this._inputEl.focus();\n      this._inputEl.scrollLeft = 0;\n      this._inputEl.setSelectionRange(0, 0);\n      this.lastSelected = JSON.stringify(selected);\n      this._eventEmitter.emit('result', { result: selected });\n      this.eventManager.select(selected, this);\n    }\n  },\n\n  _geocode: function(searchInput) {\n    this._loadingEl.style.display = 'block';\n    this._eventEmitter.emit('loading', { query: searchInput });\n    this.inputString = searchInput;\n    // Possible config proprerties to pass to client\n    var keys = [\n      'bbox',\n      'limit',\n      'proximity',\n      'countries',\n      'types',\n      'language',\n      'reverseMode',\n      'mode'\n    ];\n    var self = this;\n    // Create config object\n    var config = keys.reduce(function(config, key) {\n      if (self.options[key]) {\n        // countries, types, and language need to be passed in as arrays to client\n        // https://github.com/mapbox/mapbox-sdk-js/blob/master/services/geocoding.js#L38-L47\n        ['countries', 'types', 'language'].indexOf(key) > -1\n          ? (config[key] = self.options[key].split(/[\\s,]+/))\n          : (config[key] = self.options[key]);\n\n        if (key === 'proximity' && self.options[key] && self.options[key].longitude && self.options[key].latitude) {\n          config[key] = [self.options[key].longitude, self.options[key].latitude]\n        }\n      }\n      return config;\n    }, {});\n\n    var request;\n    if (this.options.localGeocoderOnly){\n      request = Promise.resolve();\n    }\n    // check if searchInput resembles coordinates, and if it does,\n    // make the request a reverseGeocode\n    else if (\n      this.options.reverseGeocode &&\n      /(-?\\d+\\.?\\d*)[, ]+(-?\\d+\\.?\\d*)[ ]*$/.test(searchInput)\n    ) {\n      // parse coordinates\n      var coords = searchInput.split(/[\\s(,)?]+/).map(function(c) {\n        return parseFloat(c, 10);\n      }).reverse();\n\n      // client only accepts one type for reverseGeocode, so\n      // use first config type if one, if not default to poi\n      config.types ? [config.types[0]] : [\"poi\"];\n      config = extend(config, { query: coords, limit: 1 });\n      request = this.geocoderService.reverseGeocode(config).send();\n    } else {\n      config = extend(config, { query: searchInput });\n      request = this.geocoderService.forwardGeocode(config).send();\n    }\n\n    var localGeocoderRes = [];\n    if (this.options.localGeocoder) {\n      localGeocoderRes = this.options.localGeocoder(searchInput);\n      if (!localGeocoderRes) {\n        localGeocoderRes = [];\n      }\n    }\n\n    request.then(\n      function(response) {\n        this._loadingEl.style.display = 'none';\n\n        var res = {};\n\n        if (!response){\n          res = {\n            type: 'FeatureCollection',\n            features: []\n          }\n        }else if (response.statusCode == '200') {\n          res = response.body;\n          res.request = response.request\n          res.headers = response.headers\n        }\n\n        res.config = config;\n        if (this.fresh){\n          this.eventManager.start(this);\n          this.fresh = false;\n        }\n        // supplement Mapbox Geocoding API results with locally populated results\n        res.features = res.features\n          ? localGeocoderRes.concat(res.features)\n          : localGeocoderRes;\n\n        // apply results filter if provided\n        if (this.options.filter && res.features.length) {\n          res.features = res.features.filter(this.options.filter);\n        }\n\n        if (res.features.length) {\n          this._clearEl.style.display = 'block';\n          this._eventEmitter.emit('results', res);\n          this._typeahead.update(res.features);\n        } else {\n          this._clearEl.style.display = 'none';\n          this._typeahead.selected = null;\n          this._renderNoResults();\n          this._eventEmitter.emit('results', res);\n        }\n\n      }.bind(this)\n    );\n\n    request.catch(\n      function(err) {\n        this._loadingEl.style.display = 'none';\n\n        // in the event of an error in the Mapbox Geocoding API still display results from the localGeocoder\n        if (localGeocoderRes.length && this.options.localGeocoder) {\n          this._clearEl.style.display = 'block';\n          this._typeahead.update(localGeocoderRes);\n        } else {\n          this._clearEl.style.display = 'none';\n          this._typeahead.selected = null;\n          this._renderError();\n        }\n\n        this._eventEmitter.emit('results', { features: localGeocoderRes });\n        this._eventEmitter.emit('error', { error: err });\n      }.bind(this)\n    );\n\n    return request;\n  },\n\n  /**\n   * Shared logic for clearing input\n   * @param {Event} [ev] the event that triggered the clear, if available\n   * @private\n   *\n   */\n  _clear: function(ev) {\n    if (ev) ev.preventDefault();\n    this._inputEl.value = '';\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._onChange();\n    this._clearEl.style.display = 'none';\n    this._removeMarker();\n    this.lastSelected = null;\n    this._eventEmitter.emit('clear');\n    this.fresh = true;\n  },\n\n  /**\n   * Clear and then focus the input.\n   * @param {Event} [ev] the event that triggered the clear, if available\n   *\n   */\n  clear: function(ev) {\n    this._clear(ev);\n    this._inputEl.focus();\n  },\n\n\n  /**\n   * Clear the input, without refocusing it. Used to implement clearOnBlur\n   * constructor option.\n   * @param {Event} [ev] the blur event\n   * @private\n   */\n  _clearOnBlur: function(ev) {\n    var ctx = this;\n\n    /*\n     * If relatedTarget is not found, assume user targeted the suggestions list.\n     * In that case, do not clear on blur. There are other edge cases where\n     * ev.relatedTarget could be null. Clicking on list always results in null\n     * relatedtarget because of upstream behavior in `suggestions`.\n     *\n     * The ideal solution would be to check if ev.relatedTarget is a child of\n     * the list. See issue #258 for details on why we can't do that yet.\n     */\n    if (ev.relatedTarget) {\n      ctx._clear(ev);\n    }\n  },\n\n  _onQueryResult: function(response) {\n    var results = response.body;\n    if (!results.features.length) return;\n    var result = results.features[0];\n    this._typeahead.selected = result;\n    this._inputEl.value = result.place_name;\n    this._onChange();\n  },\n\n  _updateProximity: function() {\n    // proximity is designed for local scale, if the user is looking at the whole world,\n    // it doesn't make sense to factor in the arbitrary centre of the map\n    if (!this._map){\n      return;\n    }\n    if (this._map.getZoom() > 9) {\n      var center = this._map.getCenter().wrap();\n      this.setProximity({ longitude: center.lng, latitude: center.lat });\n    } else {\n      this.setProximity(null);\n    }\n  },\n\n  _collapse: function() {\n    // do not collapse if input is in focus\n    if (!this._inputEl.value && this._inputEl !== document.activeElement) this.container.classList.add('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  _unCollapse: function() {\n    this.container.classList.remove('mapboxgl-ctrl-geocoder--collapsed');\n  },\n\n  /**\n   * Set & query the input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  query: function(searchInput) {\n    this._geocode(searchInput).then(this._onQueryResult);\n    return this;\n  },\n\n  _renderError: function(){\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error'>There was an error reaching the server</div>\"\n    this._renderMessage(errorMessage);\n  },\n\n  _renderNoResults: function(){\n    var errorMessage = \"<div class='mapbox-gl-geocoder--error mapbox-gl-geocoder--no-results'>No results found</div>\";\n    this._renderMessage(errorMessage);\n  },\n\n  _renderMessage: function(msg){\n    this._typeahead.update([]);\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._typeahead.renderError(msg);\n  },\n\n  /**\n   * Get the text to use as the search bar placeholder\n   *\n   * If placeholder is provided in options, then use options.placeholder\n   * Otherwise, if language is provided in options, then use the localized string of the first language if available\n   * Otherwise use the default\n   *\n   * @returns {String} the value to use as the search bar placeholder\n   * @private\n   */\n  _getPlaceholderText: function(){\n    if (this.options.placeholder) return this.options.placeholder;\n    if (this.options.language){\n      var firstLanguage = this.options.language.split(\",\")[0];\n      var language = subtag.language(firstLanguage);\n      var localizedValue = localization.placeholder[language];\n      if (localizedValue)  return localizedValue;\n    }\n    return 'Search';\n  },\n\n  /**\n   * Set input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  setInput: function(searchInput) {\n    // Set input value to passed value and clear everything else.\n    this._inputEl.value = searchInput;\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._onChange();\n    return this;\n  },\n\n  /**\n   * Set proximity\n   * @param {Object} proximity The new `options.proximity` value. This is a geographical point given as an object with `latitude` and `longitude` properties.\n   * @returns {MapboxGeocoder} this\n   */\n  setProximity: function(proximity) {\n    this.options.proximity = proximity;\n    return this;\n  },\n\n  /**\n   * Get proximity\n   * @returns {Object} The geocoder proximity\n   */\n  getProximity: function() {\n    return this.options.proximity;\n  },\n\n  /**\n   * Set the render function used in the results dropdown\n   * @param {Function} fn The function to use as a render function. This function accepts a single [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) object as input and returns a string.\n   * @returns {MapboxGeocoder} this\n   */\n  setRenderFunction: function(fn){\n    if (fn && typeof(fn) == \"function\"){\n      this._typeahead.render = fn;\n    }\n    return this;\n  },\n\n  /**\n   * Get the function used to render the results dropdown\n   *\n   * @returns {Function} the render function\n   */\n  getRenderFunction: function(){\n    return this._typeahead.render;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   *\n   * Look first at the explicitly set options otherwise use the browser's language settings\n   * @param {String} language Specify the language to use for response text and query result weighting. Options are IETF language tags comprised of a mandatory ISO 639-1 language code and optionally one or more IETF subtags for country or script. More than one value can also be specified, separated by commas.\n   * @returns {MapboxGeocoder} this\n   */\n  setLanguage: function(language){\n    var browserLocale = navigator.language || navigator.userLanguage || navigator.browserLanguage;\n    this.options.language = language || this.options.language || browserLocale;\n    return this;\n  },\n\n  /**\n   * Get the language to use in UI elements and when making search requests\n   * @returns {String} The language(s) used by the plugin, if any\n   */\n  getLanguage: function(){\n    return this.options.language;\n  },\n\n  /**\n   * Get the zoom level the map will move to when there is no bounding box on the selected result\n   * @returns {Number} the map zoom\n   */\n  getZoom: function(){\n    return this.options.zoom;\n  },\n\n  /**\n   * Set the zoom level\n   * @param {Number} zoom The zoom level that the map should animate to when a `bbox` isn't found in the response. If a `bbox` is found the map will fit to the `bbox`.\n   * @returns {MapboxGeocoder} this\n   */\n  setZoom: function(zoom){\n    this.options.zoom = zoom;\n    return this;\n  },\n\n  /**\n   * Get the parameters used to fly to the selected response, if any\n   * @returns {Boolean|Object} The `flyTo` option\n   */\n  getFlyTo: function(){\n    return this.options.flyTo;\n  },\n\n  /**\n   * Set the flyTo options\n   * @param {Boolean|Object} flyTo If false, animating the map to a selected result is disabled. If true, animating the map will use the default animation parameters. If an object, it will be passed as `options` to the map [`flyTo`](https://docs.mapbox.com/mapbox-gl-js/api/#map#flyto) or [`fitBounds`](https://docs.mapbox.com/mapbox-gl-js/api/#map#fitbounds) method providing control over the animation of the transition.\n   */\n  setFlyTo: function(flyTo){\n    this.options.flyTo = flyTo;\n    return this;\n  },\n\n  /**\n   * Get the value of the placeholder string\n   * @returns {String} The input element's placeholder value\n   */\n  getPlaceholder: function(){\n    return this.options.placeholder;\n  },\n\n  /**\n   * Set the value of the input element's placeholder\n   * @param {String} placeholder the text to use as the input element's placeholder\n   * @returns {MapboxGeocoder} this\n   */\n  setPlaceholder: function(placeholder){\n    this.placeholder = (placeholder) ? placeholder : this._getPlaceholderText();\n    this._inputEl.placeholder = this.placeholder;\n    this._inputEl.setAttribute('aria-label', this.placeholder);\n    return this\n  },\n\n  /**\n   * Get the bounding box used by the plugin\n   * @returns {Array<Number>} the bounding box, if any\n   */\n  getBbox: function(){\n    return this.options.bbox;\n  },\n\n  /**\n   * Set the bounding box to limit search results to\n   * @param {Array<Number>} bbox a bounding box given as an array in the format [minX, minY, maxX, maxY].\n   * @returns {MapboxGeocoder} this\n   */\n  setBbox: function(bbox){\n    this.options.bbox = bbox;\n    return this;\n  },\n\n  /**\n   * Get a list of the countries to limit search results to\n   * @returns {String} a comma separated list of countries to limit to, if any\n   */\n  getCountries: function(){\n    return this.options.countries;\n  },\n\n  /**\n   * Set the countries to limit search results to\n   * @param {String} countries a comma separated list of countries to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setCountries: function(countries){\n    this.options.countries = countries;\n    return this;\n  },\n\n  /**\n   * Get a list of the types to limit search results to\n   * @returns {String} a comma separated list of types to limit to\n   */\n  getTypes: function(){\n    return this.options.types;\n  },\n\n  /**\n   * Set the types to limit search results to\n   * @param {String} countries a comma separated list of types to limit to\n   * @returns {MapboxGeocoder} this\n   */\n  setTypes: function(types){\n    this.options.types = types;\n    return this;\n  },\n\n  /**\n   * Get the minimum number of characters typed to trigger results used in the plugin\n   * @returns {Number} The minimum length in characters before a search is triggered\n   */\n  getMinLength: function(){\n    return this.options.minLength;\n  },\n\n  /**\n   * Set the minimum number of characters typed to trigger results used by the plugin\n   * @param {Number} minLength the minimum length in characters\n   * @returns {MapboxGeocoder} this\n   */\n  setMinLength: function(minLength){\n    this.options.minLength = minLength;\n    if (this._typeahead)  this._typeahead.minLength = minLength;\n    return this;\n  },\n\n  /**\n   * Get the limit value for the number of results to display used by the plugin\n   * @returns {Number} The limit value for the number of results to display used by the plugin\n   */\n  getLimit: function(){\n    return this.options.limit;\n  },\n\n  /**\n   * Set the limit value for the number of results to display used by the plugin\n   * @param {Number} limit the number of search results to return\n   * @returns {MapboxGeocoder}\n   */\n  setLimit: function(limit){\n    this.options.limit = limit;\n    if (this._typeahead) this._typeahead.options.limit = limit;\n    return this;\n  },\n\n  /**\n   * Get the filter function used by the plugin\n   * @returns {Function} the filter function\n   */\n  getFilter: function(){\n    return this.options.filter;\n  },\n\n  /**\n   * Set the filter function used by the plugin.\n   * @param {Function} filter A function which accepts a Feature in the [Carmen GeoJSON](https://github.com/mapbox/carmen/blob/master/carmen-geojson.md) format to filter out results from the Geocoding API response before they are included in the suggestions list. Return `true` to keep the item, `false` otherwise.\n   * @returns {MapboxGeocoder} this\n   */\n  setFilter: function(filter){\n    this.options.filter = filter;\n    return this;\n  },\n\n  /**\n   * Set the geocoding endpoint used by the plugin.\n   * @param {Function} origin A function which accepts an HTTPS URL to specify the endpoint to query results from.\n   * @returns {MapboxGeocoder} this\n   */\n  setOrigin: function(origin){\n    this.options.origin = origin;\n    this.geocoderService = mbxGeocoder(\n      MapboxClient({\n        accessToken: this.options.accessToken,\n        origin: this.options.origin\n      })\n    );\n    return this;\n  },\n\n  /**\n   * Get the geocoding endpoint the plugin is currently set to\n   * @returns {Function} the endpoint URL\n   */\n  getOrigin: function(){\n    return this.options.origin;\n  },\n\n  /**\n   * Handle the placement of a result marking the selected result\n   * @private\n   * @param {Object} selected the selected geojson feature\n   * @returns {MapboxGeocoder} this\n   */\n  _handleMarker: function(selected){\n    // clean up any old marker that might be present\n    if (!this._map){\n      return;\n    }\n    this._removeMarker();\n    var defaultMarkerOptions = {\n      color: '#4668F2'\n    }\n    var markerOptions = extend({}, defaultMarkerOptions, this.options.marker)\n    this.mapMarker = new this._mapboxgl.Marker(markerOptions);\n    if (selected.center) {\n      this.mapMarker\n        .setLngLat(selected.center)\n        .addTo(this._map);\n    } else if (selected.geometry && selected.geometry.type && selected.geometry.type === 'Point' && selected.geometry.coordinates) {\n      this.mapMarker\n        .setLngLat(selected.geometry.coordinates)\n        .addTo(this._map);\n    }\n    return this;\n  },\n\n  /**\n   * Handle the removal of a result marker\n   * @private\n   */\n  _removeMarker: function(){\n    if (this.mapMarker){\n      this.mapMarker.remove();\n      this.mapMarker = null;\n    }\n  },\n\n  /**\n   * Subscribe to events that happen within the plugin.\n   * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n   *\n   * - __clear__ `Emitted when the input is cleared`\n   * - __loading__ `{ query } Emitted when the geocoder is looking up a query`\n   * - __results__ `{ results } Fired when the geocoder returns a response`\n   * - __result__ `{ result } Fired when input is set`\n   * - __error__ `{ error } Error as string`\n   * @param {Function} fn function that's called when the event is emitted.\n   * @returns {MapboxGeocoder} this;\n   */\n  on: function(type, fn) {\n    this._eventEmitter.on(type, fn);\n    return this;\n  },\n\n  /**\n   * Remove an event\n   * @returns {MapboxGeocoder} this\n   * @param {String} type Event name.\n   * @param {Function} fn Function that should unsubscribe to the event emitted.\n   */\n  off: function(type, fn) {\n    this._eventEmitter.removeListener(type, fn);\n    this.eventManager.remove();\n    return this;\n  }\n};\n\nmodule.exports = MapboxGeocoder;\n"]},"metadata":{},"sourceType":"script"}